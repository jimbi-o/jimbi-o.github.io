<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>notes on graphics programming</title><link>https://jimbi-o.github.io/</link><description>Recent content on notes on graphics programming</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Wed, 29 Dec 2021 12:45:12 +0900</lastBuildDate><atom:link href="https://jimbi-o.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Agility SDK</title><link>https://jimbi-o.github.io/posts/20211229-agility-sdk/</link><pubDate>Wed, 29 Dec 2021 12:45:12 +0900</pubDate><guid>https://jimbi-o.github.io/posts/20211229-agility-sdk/</guid><description>作業ディレクトリ
Enhanced Barriersが使いたいので導入。
最新版dxcの入手 Releases · microsoft/DirectXShaderCompilerから最新版のURLを取得。CMakeからプロジェクトに取り込み。
CPMAddPackage( NAME dxc URL https://github.com/microsoft/DirectXShaderCompiler/releases/download/v1.6.2112/dxc_2021_12_08.zip VERSION v1.6.2112 DOWNLOAD_ONLY yes )#... target_include_directories(${CMAKE_PROJECT_NAME} PRIVATE &amp;#34;${dxc_SOURCE_DIR}/inc&amp;#34; )Agility SDKの組み込み こちらもcmakeで組み込み。NuGet Gallery | Microsoft.Direct3D.D3D12 1.700.10-previewからDownload packageのリンクを取得。バージョン上がったら必要に応じて追随。
CPMAddPackage( NAME d3d12 URL https://www.nuget.org/api/v2/package/Microsoft.Direct3D.D3D12/1.700.10-preview VERSION v1.700.10-preview DOWNLOAD_ONLY yes )#... target_include_directories(${CMAKE_PROJECT_NAME} PRIVATE &amp;#34;${d3d12_SOURCE_DIR}/build/native/include&amp;#34; add_custom_command(TARGET ${CMAKE_PROJECT_NAME} POST_BUILD COMMAND ${CMAKE_COMMAND} -E make_directory &amp;#34;$&amp;lt;TARGET_FILE_DIR:${CMAKE_PROJECT_NAME}&amp;gt;/d3d12&amp;#34;)add_custom_command(TARGET ${CMAKE_PROJECT_NAME} POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different &amp;#34;${d3d12_SOURCE_DIR}/build/native/bin/x64/D3D12Core.dll&amp;#34; &amp;#34;$&amp;lt;$&amp;lt;CONFIG:Debug&amp;gt;:${d3d12_SOURCE_DIR}/build/native/bin/x64/D3D12Core.pdb&amp;gt;&amp;#34; &amp;#34;$&amp;lt;$&amp;lt;CONFIG:Debug&amp;gt;:${d3d12_SOURCE_DIR}/build/native/bin/x64/d3d12SDKLayers.dll&amp;gt;&amp;#34; &amp;#34;$&amp;lt;$&amp;lt;CONFIG:Debug&amp;gt;:${d3d12_SOURCE_DIR}/build/native/bin/x64/d3d12SDKLayers.pdb&amp;gt;&amp;#34; &amp;#34;$&amp;lt;TARGET_FILE_DIR:${CMAKE_PROJECT_NAME}&amp;gt;/d3d12&amp;#34;)D3D12SDKVersionはDirectX 12 Agility SDK Downloads - DirectX Developer Blogから確認。
参考 Getting Started with the Agility SDK - DirectX Developer Blog D3D12 Enhanced Barriers Preview - DirectX Developer Blog misc.</description></item><item><title>about</title><link>https://jimbi-o.github.io/about/</link><pubDate>Mon, 27 Dec 2021 23:52:16 +0900</pubDate><guid>https://jimbi-o.github.io/about/</guid><description>グラフィックスプログラミング関連の覚書用。</description></item><item><title>appveyor + codecov + coverity scan</title><link>https://jimbi-o.github.io/posts/20211227-appveyor-codecov-coverity/</link><pubDate>Mon, 27 Dec 2021 23:30:18 +0900</pubDate><guid>https://jimbi-o.github.io/posts/20211227-appveyor-codecov-coverity/</guid><description>作業レポジトリ
d3d12がVisual Studioのみなので、travis捨ててappveyorだけあればいいやという動機で着手。
appveyor + codecov version: 1.0.{build} image: - Visual Studio 2019 configuration: - Debug - Release install: - choco install opencppcoverage codecov - set PATH=C:\Program Files\OpenCppCoverage;%PATH% before_build: - cmd: cmake -S . -B build -DBUILD_WITH_TEST=ON build_script: - cmake --build build --config %configuration% for: - matrix: only: - configuration: Debug after_build: - cd build - OpenCppCoverage.exe --sources src --sources tests --export_type cobertura:coverage.xml --modules &amp;quot;*.exe&amp;quot; --cover_children -- %configuration%/illuminate.exe -C %configuration% --output-on-failure - codecov -f coverage.</description></item><item><title>github + hugo</title><link>https://jimbi-o.github.io/posts/20211227-setup-hugo-with-github/</link><pubDate>Mon, 27 Dec 2021 17:34:36 +0900</pubDate><guid>https://jimbi-o.github.io/posts/20211227-setup-hugo-with-github/</guid><description>作業メモ 作業レポジトリ
hugoをインストール sudo apt install hugo quickstartに則ってコンテンツを作成 config.tomlのlanguageCodeを変更 languageCode = &amp;quot;ja&amp;quot; RSS用の設定らしい ルートディレクトリ下に.github/workflows/gh-pages.ymlを作成 こちらに中身が置いてある githubでレポジトリ[username].github.ioを作成 こちらに従ってデプロイ用のトークンを設定 gitにcommitしてpushする [username].github.ioのレポジトリのSettings &amp;gt; Pages &amp;gt; Github Pages &amp;gt; Source で Branch:mainになっているところをBranch:gh-pagesに変更 hugoのgithub actionsだとデフォルトでgh-pagesにコミットされるため 参考 quickstart ローカルでの動作確認URL: http://localhost:1313/ WSL2だとLiveReloadが動かない？ -&amp;gt; symbolic link越しで/dev/mnt以下にリンクしていると動かないらしい。 githubにサイトをセットアップする 初期セットアップ step-by-step tutorial another tutorial</description></item></channel></rss>